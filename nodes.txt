SSM-CRUD-GWG
ssm: SpringMVC+Spring+Mybatis
CRUD:Create(创建)、Retrieve(查询)、Update(更新)、Delete(删除)
---------------------------------------------------------------------------------------------
技术点：
1、基础框架-ssm(SpringMVC+Spring+Mybatis)
2、数据库-MySQL
3、前端框架-bootstrap快速搭建简洁美观的界面
4、项目的依赖管理-Maven
5、分页-pagehelper
6、逆向工程-Mybatis Generator
---------------------------------------------------------------------------------------------
基础环境搭建:
1、创建一个maven工程
2、引入项目依赖的jar包
    spring
    springMVC
    mybatis
    数据库连接池，驱动包
    其他（jstl,servlet-api,junit）
3、引入bootstrap前端框架
4、编写ssm整合的关键配置文件
     web.xml：启动spring的容器,设置监听器，设置springmvc的前端控制器，字符编码过滤器，使用Rest风格的URI的过滤器
     spring：applicationContext.xml
     springMVC：dispatcherServlet-servlet.xml
     mybatis：mybatis-config.xml
     使用mybatis的逆向工程生成对应的bean,dao以及mapper：mbg.xml
5、测试mapper
---------------------------------------------------------------------------------------------
CRUD查询
1、访问index.jsp页面
2、index.jsp页面发送出查询员工列表请求
3、EmployeeController来接受请求，调用相应控制器方法查出员工数据
4、来到list.jsp页面进行展示
5、pageHelper分页插件完成分页查询功能
URI：/emps
改进查询-ajax
1、index.jsp页面直接发送ajax请求进行员工分页数据的查询
2、服务器将查出的数据，以json字符串的形式返回给浏览器
3、浏览器收到js字符串。可以使用js对json进行解析，使用js通过dom增删改形式改变页面。
4、返回json就可以实现客户端的无关性且可以多平台浏览
前二步步骤：index.jsp页面发送ajax请求到前端控制器，找到并调用相应的控制器方法，其控制器方法调用相应service下的业务逻辑方法，业务逻辑方法再调用dao下的数据处理方法并映射到相应的xml文件，返回要进行操作的数据对象，最终由Msg类进行封装，由@ResponseBody注解自动将对象转换为json。
---------------------------------------------------------------------------------------------
CRUD新增
1、在index.jsp页面点击"新增"
2、弹出新增对话框
3、去数据库查询部门列表，显示在对话框中
4、用户输入数据，并进行校验
    jquery前端校验，ajax用户名重复校验，重要数据（后端校验(JSR303)，数据库唯一约束）
5、完成保存，跳转到添加的最后一页
URI：
    /emp/{id} GET 查询员工
    /emp POST 保存员工
    /emp/{id} PUT 修改员工
    /emp/{id} DELETE 删除
---------------------------------------------------------------------------------------------
CRUD修改
1、点击编辑
2、弹出用户修改的模态框（显示用户信息）
3、点击更新，完成用户修改
---------------------------------------------------------------------------------------------
CRUD删除
1、单个删除  URI:/emp/{id} DELETE
2、批量删除
